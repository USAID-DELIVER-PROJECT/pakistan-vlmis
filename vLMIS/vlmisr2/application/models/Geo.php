<?php

/**
 * Model_Geo
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    Logistics Management Information System for Vaccines
 * @subpackage Maps
 * @author    Hannan Mehmood <hannanmehmood@yahoo.com>
 * @version    2
 */
class Model_Geo extends Model_Base {

    public function __construct() {
        parent::__construct();
    }

    public function getMosMapData($year, $month, $province, $product, $level) {

        $em = Zend_Registry::get('doctrine');

        if ($month < 10) {
            $month = "0" . $month;
        }

        $date = $year . "-" . $month . "-" . "01";

        if ($province == "all") {
            $provFilter = "";
            $provFilter2 = "";
        } else {
            $provFilter = "AND locations.province_id =" . $province;
            $provFilter2 = "WHERE map_district_mapping.province_id =" . $province;
        }

        if ($level == "4") {
            $level_type = "DW";
        } else if ($level == "all") {
            $level_type = "D";
        } else {
            
        }

        if ($level == "4" || $level == "all") {
            $str_sql = "SELECT
                                   map_district_mapping.mapping_id AS district_id,
                                   map_district_mapping.district_name,
                                   ROUND(SUM(A.mos), 2) AS mos
                                FROM
                                            (
                                                    SELECT
                                                            warehouses.district_id,
                                                            locations.location_name AS district_name,
                                                            REPgetMOS (
                                                                    '" . $level_type . "',
                                                                    " . $month . ",
                                                                    " . $year . ",
                                                                    " . $product . ",
                                                                    1,
                                                                    warehouses.district_id,
                                                                    warehouses.district_id
                                                            ) mos
                                                    FROM
                                                            warehouses
                                                    INNER JOIN pilot_districts ON warehouses.district_id = pilot_districts.district_id
                                                    INNER JOIN locations ON warehouses.location_id = locations.pk_id
                                                    WHERE
                                                            locations.geo_level_id = 4
                                                            and warehouses.status = 1
							    $provFilter
                                                    GROUP BY
                                                            warehouses.district_id
                                            ) A
                                    INNER JOIN map_district_mapping ON map_district_mapping.district_id = A.district_id
                                    GROUP BY
                                            map_district_mapping.mapping_id";
        } else {
            $str_sql = "SELECT 
                            map_district_mapping.mapping_id as district_id,
                            map_district_mapping.district_name,
                            SUM(coalesce(ROUND((A.CB / A.AMC), 2),null,0)) AS mos 
                            FROM
                                 (SELECT DISTINCT
                                             warehouses.district_id as dist,
                                              locations.location_name,
								(
								SELECT
								IFNULL(sum(IFNULL(warehouses_data.closing_balance,0)),0)
								FROM
								warehouses
						INNER JOIN warehouses_data ON warehouses.pk_id = warehouses_data.warehouse_id
						INNER JOIN stakeholders ON warehouses.stakeholder_office_id = stakeholders.pk_id
						WHERE
						warehouses_data.item_pack_size_id = " . $product . "
						AND DATE_FORMAT(warehouses_data.reporting_start_date, '%Y-%m-%d') = '" . $date . "'
						AND warehouses.district_id = dist
						AND stakeholders.geo_level_id = 6
						) AS CB,
			        ROUND(REPgetConsumptionAVG('D'," . $month . "," . $year . "," . $product . ",1,warehouses.district_id,warehouses.district_id)) AS AMC
                                    FROM
                                        warehouses
                                    INNER JOIN stakeholders ON stakeholders.pk_id = warehouses.stakeholder_office_id
                                    INNER JOIN pilot_districts ON warehouses.district_id = pilot_districts.district_id
                                    inner JOIN locations ON warehouses.district_id = locations.pk_id
                                    WHERE
                                        stakeholders.geo_level_id = 4
                                        and warehouses.status = 1                                        
)A
                                        
					INNER JOIN map_district_mapping ON A.dist = map_district_mapping.district_id
                                        $provFilter2
				GROUP BY
				map_district_mapping.mapping_id";
        }

        $row = $em->getConnection()->prepare($str_sql);
        $row->execute();
        $data = $row->fetchAll(\PDO::FETCH_ASSOC);

        return $data;
    }

    public function getAmcMapData($year, $month, $product, $province, $type) {

        $em = Zend_Registry::get('doctrine');


        if ($province == "all") {
            $provFilter = "";
        } else {
            $provFilter = "AND locations.province_id =" . $province;
        }


        if ($type == "C") {

            $str_sql = "SELECT
									map_district_mapping.mapping_id AS district_id,
									map_district_mapping.district_name,
									SUM(A.consumption) AS consumption
								FROM
									(
										SELECT
											warehouses.district_id,
											locations.location_name AS district_name,
											COALESCE (
												REPgetConsumption (
													" . $month . ",
													" . $year . ",
													" . $product . ",
													 1,
													'D',
													warehouses.district_id
												),
												NULL,
												0
											) AS consumption
										FROM
											warehouses
										INNER JOIN pilot_districts ON warehouses.district_id = pilot_districts.district_id
										INNER JOIN locations ON warehouses.location_id = locations.pk_id
										WHERE
											locations.geo_level_id = 4
                                                                                        and warehouses.status = 1
										$provFilter
										GROUP BY
											warehouses.district_id
									) A
								INNER JOIN map_district_mapping ON map_district_mapping.district_id = A.district_id
								GROUP BY
									map_district_mapping.mapping_id";
        } else {

            $str_sql = "SELECT
									map_district_mapping.mapping_id AS district_id,
									map_district_mapping.district_name,
									ROUND(SUM(A.consumption)) AS consumption
								FROM
									(
										SELECT
											warehouses.district_id,
											locations.location_name AS district_name,
											COALESCE (
												REPgetConsumptionAVG('D'," . $month . "," . $year . "," . $product . ",1,warehouses.district_id,warehouses.district_id),
												NULL,
												0
											) AS consumption
										FROM
											warehouses
										INNER JOIN pilot_districts ON warehouses.district_id = pilot_districts.district_id
										INNER JOIN locations ON warehouses.location_id = locations.pk_id
										WHERE
											locations.geo_level_id = 4
                                                                                        and warehouses.status = 1
										$provFilter
										GROUP BY
											warehouses.district_id
									) A
								INNER JOIN map_district_mapping ON map_district_mapping.district_id = A.district_id
								GROUP BY
									map_district_mapping.mapping_id";
        }



        $row = $em->getConnection()->prepare($str_sql);
        $row->execute();
        $data = $row->fetchAll(\PDO::FETCH_ASSOC);

        return $data;
    }

    public function getReportingRate($year, $month, $province) {
        $em = Zend_Registry::get('doctrine');

        if ($province == "all") {
            $provFilter = "";
        } else {
            $provFilter = "WHERE map_district_mapping.province_id =" . $province;
        }

        $query = "select
                                    map_district_mapping.mapping_id as district_id,
                                    A.location_name as district_name,
                                    sum(coalesce(B.reported,null,0)) as reported,
                                    sum(coalesce(B.total_warehouse,null,0)) as total_warehouse,
                                    ROUND( sum(coalesce(B.reported,null,0))/sum(coalesce(B.total_warehouse,null,0))*100,1) as reporting_rate
                            from
                            (
                            SELECT DISTINCT
                                        warehouses.district_id,
                                        locations.location_name
                                    FROM
                                        warehouses
                                    INNER JOIN stakeholders ON stakeholders.pk_id = warehouses.stakeholder_office_id
                                    INNER JOIN pilot_districts ON warehouses.district_id = pilot_districts.district_id
                                    inner JOIN locations ON warehouses.district_id = locations.pk_id
                                    WHERE
                                        stakeholders.geo_level_id = 4 
                                        and warehouses.status = 1) A
                            left JOIN (
                            SELECT
                                    B.district_id,
                                    B.districtName as district_name,
                                    reported as reported,
                                    TotalWH as total_warehouse
                                   FROM
                                    (
                                     SELECT
                                      District.pk_id AS districtId,
                                      District.location_name AS districtName,
                                      COUNT(DISTINCT UC.pk_id) AS reported
                                     FROM
                                      locations AS District
                                     INNER JOIN locations AS UC ON District.pk_id = UC.district_id
                                     INNER JOIN warehouses ON UC.pk_id = warehouses.location_id
                                     INNER JOIN warehouses_data ON warehouses.pk_id = warehouses_data.warehouse_id
                                     WHERE
                                      UC.geo_level_id = 6
                                      AND warehouses.status = 1
                                    AND warehouses.stakeholder_id = 1
                                    AND MONTH(warehouses_data.reporting_start_date) = " . $month . "
                                    AND YEAR(warehouses_data.reporting_start_date) = " . $year . "
                                    AND warehouses_data.issue_balance IS NOT NULL
                                    AND warehouses_data.issue_balance != 0
                                     GROUP BY
                                      District.pk_id
                                    ) AS A
                                   RIGHT JOIN (
                                    SELECT
                                     COUNT(DISTINCT UC.pk_id) AS TotalWH,
                                     warehouses.district_id,
                                     locations.location_name AS districtName
                                    FROM
                                     locations AS UC
                                    INNER JOIN warehouses ON UC.pk_id = warehouses.location_id
                                    INNER JOIN locations ON warehouses.district_id = locations.pk_id
                                    WHERE
                                     UC.geo_level_id = 6
                                    AND warehouses.stakeholder_id = 1
                                    and warehouses.status = 1
                                    GROUP BY
                                     warehouses.district_id
                                   ) AS B ON A.districtId = B.district_id
								) AS B ON A.district_id = B.district_id
								INNER JOIN map_district_mapping ON map_district_mapping.district_id = A.district_id
                                                                $provFilter
								GROUP BY
								map_district_mapping.mapping_id";

        $row = $em->getConnection()->prepare($query);
        $row->execute();
        $data = $row->fetchAll(\PDO::FETCH_ASSOC);

        return $data;
    }

    public function getWastageMapData($year, $month, $province, $product) {
        $em = Zend_Registry::get('doctrine');

        $query = "SELECT
                        item_pack_sizes.wastage_rate_allowed
                        FROM
                        item_pack_sizes
                        WHERE
                        item_pack_sizes.pk_id = " . $product;

        $row = $em->getConnection()->prepare($query);
        $row->execute();
        while ($data = $row->fetch()) {
            $limit = $data['wastage_rate_allowed'];
        }

        if ($province == "all") {
            $provFilter = "";
        } else {
            $provFilter = "WHERE map_district_mapping.province_id =" . $province;
        }


        $query = "SELECT 
                            map_district_mapping.mapping_id AS district_id,
                            SUM(A.totalUC) AS total_ucs,
                            SUM(A.UCCOunt) AS ucs_count,
                            ROUND((COALESCE(SUM(A.UCCOunt), NULL, 0) / SUM(A.totalUC)) *  100, 1) AS wastages_rate
                            FROM(
                            SELECT
                                    B.district_id,
                                    B.totalUC,
                                    COALESCE(A.UCCOunt, NULL, 0) AS UCCOunt
                            FROM
                                    (
                                            SELECT
                                                    COUNT(A.pk_id) AS UCCOunt,
                                                    A.district_id
                                            FROM
                                                    (
                                                        SELECT
                                                            ROUND(IFNULL(( sum(warehouses_data.wastages) / ( sum( warehouses_data.issue_balance) + sum(warehouses_data.wastages))) * 100,0),1) AS wastages_rate,
                                                                    UC.pk_id,
                                                                    UC.district_id
                                                            FROM
                                                                    locations AS UC
                                                            INNER JOIN warehouses ON UC.pk_id = warehouses.location_id
                                                            INNER JOIN warehouses_data ON warehouses.pk_id = warehouses_data.warehouse_id
                                                            WHERE
                                                                    UC.geo_level_id = 6
                                                                    and warehouses.status = 1
                                                            AND MONTH (warehouses_data.reporting_start_date) = " . $month . "
                                                            AND YEAR (warehouses_data.reporting_start_date) = " . $year . "
                                                            AND warehouses_data.issue_balance IS NOT NULL
                                                            AND warehouses_data.issue_balance != 0
                                                            AND warehouses_data.item_pack_size_id = " . $product . "
                                                            AND warehouses.stakeholder_id = 1
                                                            GROUP BY
                                                                    UC.pk_id
                                                    ) A
                                            WHERE
                                                    A.wastages_rate > " . $limit . "
                                            GROUP BY
                                                    A.district_id
                                    ) A
                            RIGHT JOIN (
                                    SELECT
                                            District.pk_id AS district_id,
                                            COUNT(DISTINCT UC.pk_id) AS totalUC
                                    FROM
                                            locations AS District
                                    INNER JOIN locations AS UC ON District.pk_id = UC.district_id
                                    INNER JOIN warehouses ON UC.pk_id = warehouses.location_id
                                    INNER JOIN warehouses_data ON warehouses.pk_id = warehouses_data.warehouse_id
                                    WHERE
                                            UC.geo_level_id = 6
                                            and warehouses.status = 1
                                    AND warehouses.stakeholder_id = 1
                                    AND MONTH (warehouses_data.reporting_start_date ) = " . $month . "
                                    AND YEAR (warehouses_data.reporting_start_date) = " . $year . "
                                    AND warehouses_data.issue_balance IS NOT NULL
                                    AND warehouses_data.issue_balance != 0
                                    AND warehouses.stakeholder_id = 1
                                    GROUP BY
                                            District.pk_id
                            ) B ON A.district_id = B.district_id) A
                            INNER JOIN map_district_mapping ON map_district_mapping.district_id = A.district_id
                            $provFilter
                            GROUP BY 
                            map_district_mapping.mapping_id";


        $row = $em->getConnection()->prepare($query);
        $row->execute();
        $result = $row->fetchAll(\PDO::FETCH_ASSOC);

        return $result;
    }

    public function getWastagesVsReporting($year, $month, $province, $product) {

        $em = Zend_Registry::get('doctrine');

        $query = "SELECT
                        item_pack_sizes.wastage_rate_allowed
                        FROM
                        item_pack_sizes
                        WHERE
                        item_pack_sizes.pk_id = " . $product;

        $row = $em->getConnection()->prepare($query);
        $row->execute();
        while ($data = $row->fetch()) {
            $limit = $data['wastage_rate_allowed'];
        }

        if ($province == "all") {
            $provFilter = "";
        } else {
            $provFilter = "WHERE map_district_mapping.province_id =" . $province;
        }

        $query = "SELECT
                            A.district_id,
                            A.district_name,
                            A.reporting_rate,
                            B.wastages_rate
                    FROM
                        (
                        SELECT
                            map_district_mapping.mapping_id AS district_id,
                            A.location_name AS district_name,
                            ROUND(
                                sum(COALESCE (B.reported, NULL, 0))/sum(COALESCE (B.total_warehouse, NULL, 0)) * 100,1 ) AS reporting_rate
                             FROM
                                (
                                    SELECT DISTINCT
                                        warehouses.district_id,
                                        locations.location_name
                                    FROM
                                            warehouses
                                    INNER JOIN stakeholders ON stakeholders.pk_id = warehouses.stakeholder_office_id
                                    INNER JOIN pilot_districts ON warehouses.district_id = pilot_districts.district_id
                                    INNER JOIN locations ON warehouses.district_id = locations.pk_id
                                    WHERE
                                            stakeholders.geo_level_id = 4
                                            and warehouses.status = 1
                                            ) A
                                LEFT JOIN (
                                    SELECT
                                        B.district_id,
                                        B.districtName AS district_name,
                                        reported AS reported,
                                        TotalWH AS total_warehouse
                                    FROM
                                            (
                                    SELECT
                                            District.pk_id AS districtId,
                                            District.location_name AS districtName,
                                            COUNT(DISTINCT UC.pk_id) AS reported
                                    FROM
                                            locations AS District
                                    INNER JOIN locations AS UC ON District.pk_id = UC.district_id
                                    INNER JOIN warehouses ON UC.pk_id = warehouses.location_id
                                    INNER JOIN warehouses_data ON warehouses.pk_id = warehouses_data.warehouse_id
                                    WHERE
                                            UC.geo_level_id = 6
                                            and warehouses.status = 1
                                    AND warehouses.stakeholder_id = 1
                                    AND MONTH (warehouses_data.reporting_start_date ) = " . $month . "
                                    AND YEAR (warehouses_data.reporting_start_date) = " . $year . "
                                    AND warehouses_data.issue_balance IS NOT NULL
                                    AND warehouses_data.issue_balance != 0
                                    AND warehouses.stakeholder_id = 1
                                    GROUP BY
                                            District.pk_id
                            ) AS A
                            RIGHT JOIN (
                                    SELECT
                                            COUNT(DISTINCT UC.pk_id) AS TotalWH,
                                            warehouses.district_id,
                                            locations.location_name AS districtName
                                            FROM
                                                    locations AS UC
                                            INNER JOIN warehouses ON UC.pk_id = warehouses.location_id
                                            INNER JOIN locations ON warehouses.district_id = locations.pk_id
                                            WHERE
                                                    UC.geo_level_id = 6
                                             AND warehouses.stakeholder_id = 1
                                             and warehouses.status = 1
                                            GROUP BY
                                                    warehouses.district_id
                                    ) AS B ON A.districtId = B.district_id
                            ) AS B ON A.district_id = B.district_id
                            INNER JOIN map_district_mapping ON map_district_mapping.district_id = A.district_id
                            $provFilter
                            GROUP BY
                                    map_district_mapping.mapping_id) A
                    LEFT JOIN (
                        SELECT
                            map_district_mapping.mapping_id AS district_id,
                            SUM(A.totalUC) AS total_ucs,
                            SUM(A.UCCOunt) AS ucs_count,
                            ROUND((COALESCE (SUM(A.UCCOunt), NULL, 0) / SUM(A.totalUC) ) * 100, 1 ) AS wastages_rate
                            FROM(
                                SELECT
                                        B.district_id,
                                        B.totalUC,
                                        COALESCE (A.UCCOunt, NULL, 0) AS UCCOunt
                                FROM(
                                    SELECT
                                            COUNT(A.pk_id) AS UCCOunt,
                                            A.district_id
                                    FROM(
                                       SELECT
                                             ROUND(IFNULL((sum(warehouses_data.wastages) / ( sum(warehouses_data.issue_balance) + sum(warehouses_data.wastages) ) ) * 100,0 ), 1) AS wastages_rate,
                                            UC.pk_id,
                                            UC.district_id
                                    FROM
                                            locations AS UC
                                    INNER JOIN warehouses ON UC.pk_id = warehouses.location_id
                                    INNER JOIN warehouses_data ON warehouses.pk_id = warehouses_data.warehouse_id
                                    WHERE
                                            UC.geo_level_id = 6
                                             and warehouses.status = 1
                                    AND MONTH( warehouses_data.reporting_start_date) = " . $month . "
                                    AND YEAR (warehouses_data.reporting_start_date ) = " . $year . "
                                    AND warehouses_data.issue_balance IS NOT NULL
                                    AND warehouses_data.item_pack_size_id = " . $product . "
                                        AND warehouses.stakeholder_id = 1
                                    GROUP BY
                                            UC.pk_id
                                    ) A
                                        WHERE
                                        A.wastages_rate > " . $limit . "
                                        GROUP BY
                                        A.district_id
                                    ) A
                                    RIGHT JOIN (
                                     SELECT
                                            District.pk_id AS district_id,
                                            COUNT(DISTINCT UC.pk_id) AS totalUC
                                    FROM
                                            locations AS District
                                    INNER JOIN locations AS UC ON District.pk_id = UC.district_id
                                    INNER JOIN warehouses ON UC.pk_id = warehouses.location_id
                                    INNER JOIN warehouses_data ON warehouses.pk_id = warehouses_data.warehouse_id
                                    WHERE
                                            UC.geo_level_id = 6
                                            and warehouses.status = 1
                                    AND warehouses.stakeholder_id = 1
                                    AND MONTH (warehouses_data.reporting_start_date ) = " . $month . "
                                    AND YEAR (warehouses_data.reporting_start_date) = " . $year . "
                                    AND warehouses_data.issue_balance IS NOT NULL
                                    AND warehouses_data.issue_balance != 0
                                    AND warehouses.stakeholder_id = 1
                                    GROUP BY
                                            District.pk_id
                                     ) B ON A.district_id = B.district_id
                                            ) A
                                    INNER JOIN map_district_mapping ON map_district_mapping.district_id = A.district_id
                                    $provFilter
                                    GROUP BY
                                            map_district_mapping.mapping_id
                        ) B ON A.district_id = B.district_id";

        $row = $em->getConnection()->prepare($query);
        $row->execute();
        $data = $row->fetchAll(\PDO::FETCH_ASSOC);

        return $data;
    }

    public function getExpiryAlert($year, $month, $province, $product) {
        $em = Zend_Registry::get('doctrine');

        if ($province == "all") {
            $provFilter = "";
        } else {
            $provFilter = " WHERE map_district_mapping.province_id =" . $province;
        }

        if ($month < 10) {
            $month = "0" . $month;
        }
        $date = $year . "-" . $month . "-" . "01";

        $query = "SELECT 
                         A.mapping_id as district_id,
                         A.quantity,
                         A.ExpiringIn6Months AS QuantityIn6Months,
			 SUM(coalesce(round((A.ExpiringIn6Months / A.quantity * 100),0),null,0)) as ExpiringIn6Months,
			 SUM(coalesce(round((A.ExpiringIn12Months / A.quantity * 100),0),null,0)) as ExpiringIn12Months,
			 SUM(coalesce(round((A.ExpiringIn13Months / A.quantity * 100),0),null,0)) as ExpiringIn13Months
                         FROM                   
                         (select 
                                                 map_district_mapping.mapping_id,
                                                 SUM(COALESCE(B.quantity, NULL, 0)) as quantity,
                                                 SUM(COALESCE(B.ExpiringIn6Months, NULL, 0)) as ExpiringIn6Months,
                                                 SUM(COALESCE(B.ExpiringIn12Months, NULL, 0)) as ExpiringIn12Months,
                                                 SUM(COALESCE(B.ExpiringIn13Months, NULL, 0)) as ExpiringIn13Months
                        from( SELECT DISTINCT
                                                                warehouses.district_id,
                                                                locations.location_name as district_name
                                                            FROM
                                                                warehouses
                                                            INNER JOIN stakeholders ON stakeholders.pk_id = warehouses.stakeholder_office_id
                                                            INNER JOIN pilot_districts ON warehouses.district_id = pilot_districts.district_id
                                                            inner JOIN locations ON warehouses.district_id = locations.pk_id
                                                            WHERE
                                                          stakeholders.geo_level_id = 4 
                                                          and warehouses.status = 1
) A

                        LEFT JOIN (
                        SELECT 
                        locations.pk_id as district_id,
                        locations.location_name as district_name,
                        stock_batch.item_pack_size_id as item_id,
                        SUM(stock_batch.quantity) as quantity,
                        Sum(IF (
                           stock_batch.expiry_date > '" . $date . "' && stock_batch.expiry_date <= ADDDATE('" . $date . "', INTERVAL 6 MONTH),
                           (stock_batch.quantity),
                           0
                          )) AS ExpiringIn6Months,
                        Sum(IF (
                           (stock_batch.expiry_date > ADDDATE('" . $date . "', INTERVAL 6 MONTH) && stock_batch.expiry_date <= ADDDATE('" . $date . "', INTERVAL 13 MONTH)),
                           (stock_batch.quantity),
                           0
                          )) AS ExpiringIn12Months,
                        Sum(IF (
                           stock_batch.expiry_date > ADDDATE('" . $date . "', INTERVAL 13 MONTH),
                           (stock_batch.quantity),
                           0
                          )) AS ExpiringIn13Months
                        FROM
                        stock_batch
                        INNER JOIN warehouses ON stock_batch.warehouse_id = warehouses.pk_id
                        INNER JOIN locations ON warehouses.district_id = locations.pk_id
                        INNER JOIN stakeholders ON warehouses.stakeholder_office_id = stakeholders.pk_id
                        WHERE
                        stakeholders.geo_level_id = 4
                        and warehouses.status = 1
                        AND stock_batch.status = 'Running' 
                        and item_pack_size_id = " . $product . "
                        GROUP BY district_id) B
                        on A.district_id = B.district_id
                        INNER JOIN map_district_mapping ON A.district_id = map_district_mapping.district_id
                        $provFilter
                        GROUP BY map_district_mapping.mapping_id) A
                        GROUP BY A.mapping_id";

        $row = $em->getConnection()->prepare($query);
        $row->execute();
        $data = $row->fetchAll(\PDO::FETCH_ASSOC);

        return $data;
    }

    public function getVaccineCoverage($year, $month, $province, $product) {
        $em = Zend_Registry::get('doctrine');

        $query = "SELECT
                        items.population_percent_increase_per_year,
                        items.child_surviving_percent_per_year,
                        items.doses_per_year
                        FROM
                        items
                        INNER JOIN item_pack_sizes ON item_pack_sizes.item_id = items.pk_id
                        WHERE
                        item_pack_sizes.pk_id =" . $product;

        $row = $em->getConnection()->prepare($query);
        $row->execute();
        while ($data = $row->fetch()) {
            $pop_percent = $data['population_percent_increase_per_year'];
            $surviving_percent = $data['child_surviving_percent_per_year'];
            $doses = $data['doses_per_year'];
        }

        if ($province == "all") {
            $provFilter = "";
        } else {
            $provFilter = "WHERE map_district_mapping.province_id =" . $province;
        }

        $query = "SELECT
                            C.district_id,
                            C.consumption,
                            C.population,
                            coalesce(ROUND(C.consumption/C.population * 100 ),null,0) AS vaccine_coverage
                          FROM(
                          SELECT
                                  B.district_id,
                                  B.consumption,
                                  ROUND(COALESCE(ROUND((((location_populations.population*" . $doses . ")/100*" . $pop_percent . ")/100*" . $surviving_percent . "))/12,null,0)) AS population
                          FROM
                                  (
                                          SELECT
                                                  map_district_mapping.mapping_id AS district_id,
                                                  SUM(A.consumption) AS consumption
                                          FROM
                                                  (
                                                          SELECT
                                                                  warehouses.district_id,
                                                                  locations.location_name AS district_name,
                                                                  COALESCE(REPgetConsumption (" . $month . "," . $year . "," . $product . ",1,'D',warehouses.district_id),NULL,0) AS consumption
                                                          FROM
                                                                  warehouses
                                                          INNER JOIN pilot_districts ON warehouses.district_id = pilot_districts.district_id
                                                          INNER JOIN locations ON warehouses.location_id = locations.pk_id
                                                          WHERE
                                                                  warehouses.status = 1
                                                                  and 
                                                                  locations.geo_level_id = 4
                                                          GROUP BY
                                                                  warehouses.district_id
                                                  ) A
                                          INNER JOIN map_district_mapping ON map_district_mapping.district_id = A.district_id
                                          $provFilter
                                          GROUP BY
                                                  map_district_mapping.mapping_id
                                  ) B
                          LEFT JOIN location_populations ON B.district_id = location_id
                          WHERE
                                  DATE_FORMAT(location_populations.estimation_date,'%Y') = '" . $year . "' ) C";
        
        $row = $em->getConnection()->prepare($query);
        $row->execute();
        $data = $row->fetchAll(\PDO::FETCH_ASSOC);

        return $data;
    }

    public function getColdchainCapacity($province, $type) {
        $em = Zend_Registry::get('doctrine');
        if ($province == "all") {
            $provFilter = "";
        } else {
            $provFilter = "WHERE map_district_mapping.province_id =" . $province;
        }

        $query = "SELECT 
                         map_district_mapping.mapping_id AS district_id,
                         SUM(C.capacity) AS capacity
                        FROM
                        (SELECT
                                A.district_id,
                                COALESCE (B.capacity, NULL, 0) AS capacity
                        FROM
                                (
                                    SELECT pilot_districts.district_id FROM pilot_districts
                                ) A
                        LEFT JOIN(
                                SELECT
                                        warehouses.district_id AS district_id,
                                        ROUND(SUM(ccm_models.net_capacity_4), 2) AS capacity
                                FROM
                                        cold_chain
                                INNER JOIN ccm_models ON cold_chain.ccm_model_id = ccm_models.pk_id
                                INNER JOIN warehouses ON cold_chain.warehouse_id = warehouses.pk_id
                                INNER JOIN stakeholders ON warehouses.stakeholder_office_id = stakeholders.pk_id
                                INNER JOIN ccm_asset_types ON cold_chain.ccm_asset_type_id = ccm_asset_types.pk_id
                                WHERE
                                     ccm_asset_types.parent_id =".$type."
                                     and warehouses.status = 1    
                                GROUP BY
                                        warehouses.district_id
                        ) B ON A.district_id = B.district_id ) C
                        INNER JOIN map_district_mapping ON map_district_mapping.district_id = C.district_id
                        $provFilter
                        GROUP BY
                        map_district_mapping.mapping_id";

        $row = $em->getConnection()->prepare($query);
        $row->execute();
        $data = $row->fetchAll(\PDO::FETCH_ASSOC);
        return $data;
    }

    public function getColorClasses($id) {
        $em = Zend_Registry::get('doctrine');
        $str_sql = "SELECT
                            geo_indicator_values.geo_indicator_id,
                            geo_indicator_values.start_value,
                            geo_indicator_values.end_value,
                            geo_indicator_values.`interval`,
                            geo_indicator_values.description,
                            geo_color.color_code
                            FROM
                            geo_indicators
                            INNER JOIN geo_indicator_values ON geo_indicators.pk_id = geo_indicator_values.geo_indicator_id
                            INNER JOIN geo_color ON geo_indicator_values.geo_color_id = geo_color.pk_id
                        WHERE geo_indicators.pk_id = " . $id;

        $row = $em->getConnection()->prepare($str_sql);
        $row->execute();
        return $row->fetchAll(\PDO::FETCH_ASSOC);
    }

    public function getAcceptableWastages($product) {
        $em = Zend_Registry::get('doctrine');

        $query = "SELECT
                        item_pack_sizes.wastage_rate_allowed
                        FROM
                        item_pack_sizes
                        WHERE
                        item_pack_sizes.pk_id = " . $product;

        $row = $em->getConnection()->prepare($query);
        $row->execute();
        return $row->fetchAll(\PDO::FETCH_ASSOC);
    }

    public function getMonthRange($id) {
        $em = Zend_Registry::get('doctrine');

        $query = "SELECT
                        period.pk_id,
                        period.period_name,
                        period.period_code,
                        period.is_month,
                        period.begin_month,
                        period.end_month,
                        period.month_count
                        FROM
                        period
                        WHERE
                        period.pk_id =" . $id;

        $row = $em->getConnection()->prepare($query);
        $row->execute();
        return $row->fetchAll(\PDO::FETCH_ASSOC);
    }

    public function getBatchMapData($batch) {
        $em = Zend_Registry::get('doctrine');

        $query = "SELECT
                        DISTINCT map_district_mapping.mapping_id AS district_id,
                        map_district_mapping.district_name
                        FROM
                        stock_batch
                        INNER JOIN warehouses ON stock_batch.warehouse_id = warehouses.pk_id
                        INNER JOIN map_district_mapping ON warehouses.district_id = map_district_mapping.district_id
                        WHERE
                        stock_batch.number = '" . $batch . "'
                        and warehouses.status = 1
                        ORDER BY warehouses.district_id";

        $row = $em->getConnection()->prepare($query);
        $row->execute();
        return $row->fetchAll(\PDO::FETCH_ASSOC);
    }

    public function getBatchDetailData($batch, $district) {
        $em = Zend_Registry::get('doctrine');

        $query = "SELECT
                        warehouses.warehouse_name,
                        stock_batch.quantity,
                        stock_batch.status
                        FROM
                        stock_batch
                        INNER JOIN warehouses ON stock_batch.warehouse_id = warehouses.pk_id
                        INNER JOIN map_district_mapping ON warehouses.district_id = map_district_mapping.district_id
                        WHERE
                        stock_batch.number = '" . $batch . "'
                        AND warehouses.status = 1
                        AND map_district_mapping.mapping_id = '" . $district . "'
                        ORDER BY warehouses.district_id";

        $row = $em->getConnection()->prepare($query);
        $row->execute();
        return $row->fetchAll(\PDO::FETCH_ASSOC);
    }
    
     public function getReportingRateTrend($year, $month,$district) {
        $em = Zend_Registry::get('doctrine');

      
        
        if($month>9){}else{$month = "0".$month;}
        $day = $year."-".$month;
     
        $first_month = date('Y-m', strtotime("-4 month", strtotime($day)));
        $second_month = date('Y-m', strtotime("-3 month", strtotime($day)));
        $third_month = date('Y-m', strtotime("-2 month", strtotime($day)));
        $fourth_month = date('Y-m', strtotime("-1 month", strtotime($day)));
         
        $query = "SELECT B.MONTH AS label,COALESCE(A.value,null,0) AS value FROM 
                (SELECT SUBSTRING('JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC ', (DATE_FORMAT(A.reporting_start_date,'%m') * 4) - 3, 3) AS label,ROUND(sum(coalesce(A.reported,null,0))/sum(coalesce(A.total_warehouse,null,0))*100) as value,DATE_FORMAT(A.reporting_start_date,'%Y-%m') AS MONTH FROM
                            (SELECT
                                    B.district_id,
                                    B.districtName as district_name,
																		TotalWH as total_warehouse,
                                    reported as reported,
																	  A.reporting_start_date
                                   FROM
                                    (SELECT
                                      District.pk_id AS districtId,
                                      District.location_name AS districtName,
                                      COUNT(DISTINCT UC.pk_id) AS reported,
																			warehouses_data.reporting_start_date
                                     FROM
                                      locations AS District
                                     INNER JOIN locations AS UC ON District.pk_id = UC.district_id
                                     INNER JOIN warehouses ON UC.pk_id = warehouses.location_id
                                     INNER JOIN warehouses_data ON warehouses.pk_id = warehouses_data.warehouse_id
                                     WHERE
                                      UC.geo_level_id = 6
                                      and warehouses.status = 1
                                    AND warehouses.stakeholder_id = 1
				    AND DATE_FORMAT(warehouses_data.reporting_start_date,'%Y-%m') BETWEEN '".$first_month."' AND '".$day."'
                                    AND warehouses_data.issue_balance IS NOT NULL
                                    AND warehouses_data.issue_balance != 0
                                     GROUP BY
                                      District.pk_id,
				      warehouses_data.reporting_start_date
                                    ) AS A
                                   RIGHT JOIN (
                                   SELECT   
																		 warehouses.district_id,
                                     locations.location_name AS districtName,
																		 COUNT(DISTINCT UC.pk_id) AS TotalWH
                                    FROM
                                     locations AS UC
                                    INNER JOIN warehouses ON UC.pk_id = warehouses.location_id
                                    INNER JOIN locations ON warehouses.district_id = locations.pk_id
                                    WHERE
                                     UC.geo_level_id = 6
                                    AND warehouses.stakeholder_id = 1
                                    AND warehouses.status = 1
                                    GROUP BY
                                     warehouses.district_id
                                   ) AS B ON A.districtId = B.district_id) A
                                INNER JOIN map_district_mapping ON map_district_mapping.district_id = A.district_id
                                AND map_district_mapping.mapping_id =  '" . $district . "'
                                GROUP BY map_district_mapping.mapping_id,
                                A.reporting_start_date) A
                                RIGHT JOIN (
                                 SELECT '$first_month' AS MONTH UNION
                                 SELECT '$second_month' AS MONTH UNION  
                                 SELECT '$third_month' AS MONTH UNION
                                 SELECT '$fourth_month' AS MONTH UNION
                                 SELECT '$day' AS MONTH    
                                    ) B ON A.MONTH = B.MONTH";

        $row = $em->getConnection()->prepare($query);
        $row->execute();
        $data = $row->fetchAll(\PDO::FETCH_ASSOC);

        return $data;
    }
    
    
      public function getWastagesUcsList($year, $month,$district,$product,$limit) {
        $em = Zend_Registry::get('doctrine');

        if($month>9){}else{$month = "0".$month;}
        
        $query = "SELECT
        map_district_mapping.district_name,
	B.location_name,
	B.wastages_rate
FROM
	(
		SELECT
			A.district_id,
			A.location_name,
			A.wastages_rate
		FROM
			(
				SELECT
					ROUND(
						IFNULL(
							(
								sum(warehouses_data.wastages) / (
									sum(
										warehouses_data.issue_balance
									) + sum(warehouses_data.wastages)
								)
							) * 100,
							0
						),
						1
					) AS wastages_rate,
					UC.pk_id,
					UC.location_name,
					UC.district_id
				FROM
					locations AS UC
				INNER JOIN warehouses ON UC.pk_id = warehouses.location_id
				INNER JOIN warehouses_data ON warehouses.pk_id = warehouses_data.warehouse_id
				WHERE
					UC.geo_level_id = 6
				AND warehouses. STATUS = 1
				AND warehouses_data.issue_balance IS NOT NULL
				AND warehouses_data.issue_balance != 0
				AND warehouses_data.item_pack_size_id = ".$product."
				AND warehouses.stakeholder_id = 1
				AND MONTH (
					warehouses_data.reporting_start_date
				) = ".$month."
				AND YEAR (
					warehouses_data.reporting_start_date
				) = ".$year."
				GROUP BY
					UC.pk_id
			) A
		WHERE
			A.wastages_rate > ".$limit."
	) B
INNER JOIN map_district_mapping ON map_district_mapping.district_id = B.district_id
WHERE
	map_district_mapping.mapping_id = " . $district . "";
        
        $row = $em->getConnection()->prepare($query);
        $row->execute();
        $data = $row->fetchAll(\PDO::FETCH_ASSOC);

        return $data;
        
    
      }
      
        public function getStockBatchDetail($district,$product) {
           $em = Zend_Registry::get('doctrine'); 
            $query = "SELECT 
                        locations.location_name as district_name,
			stock_batch.number,
                        stock_batch.quantity as quantity,
                        DATE_FORMAT(stock_batch.expiry_date, '%Y-%m-%d') AS expiry_date
                        FROM
                        stock_batch
                        INNER JOIN warehouses ON stock_batch.warehouse_id = warehouses.pk_id
                        INNER JOIN locations ON warehouses.district_id = locations.pk_id
                        INNER JOIN stakeholders ON warehouses.stakeholder_office_id = stakeholders.pk_id
			INNER JOIN map_district_mapping ON map_district_mapping.district_id = warehouses.district_id
                        WHERE
                        stakeholders.geo_level_id = 4
			AND stock_batch.`status` = 'Running'
			AND map_district_mapping.mapping_id = ".$district."
                        and warehouses.status = 1
                        and item_pack_size_id = ".$product."";
           
                $row = $em->getConnection()->prepare($query);
                $row->execute();
                $data = $row->fetchAll(\PDO::FETCH_ASSOC);

                return $data;
        
        
        }
      
          public function getColdChainAssetDetail($district,$type) {
            $em = Zend_Registry::get('doctrine'); 
           
            $query = "SELECT
                                map_district_mapping.district_name,
                                ccm_asset_types.asset_type_name,
                                ROUND(
                                        SUM(ccm_models.net_capacity_4),
                                        2
                                ) AS capacity
                        FROM
                                cold_chain
                        INNER JOIN ccm_models ON cold_chain.ccm_model_id = ccm_models.pk_id
                        INNER JOIN warehouses ON cold_chain.warehouse_id = warehouses.pk_id
                        INNER JOIN stakeholders ON warehouses.stakeholder_office_id = stakeholders.pk_id
                        INNER JOIN ccm_asset_types ON cold_chain.ccm_asset_type_id = ccm_asset_types.pk_id
                        INNER JOIN map_district_mapping ON map_district_mapping.district_id = warehouses.district_id
                        WHERE
                                ccm_asset_types.parent_id = ".$type."
                        AND warehouses. STATUS = 1
                        AND map_district_mapping.mapping_id = ".$district."
                        GROUP BY
                                ccm_asset_types.asset_type_name
                        ORDER BY
                                district_name";
            
            
            
            $row = $em->getConnection()->prepare($query);
            $row->execute();
            $data = $row->fetchAll(\PDO::FETCH_ASSOC);

            return $data;
           
          }
    

}
