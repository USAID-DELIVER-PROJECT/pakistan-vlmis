<?php

/**
 * Model_StockBatch
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Logistics Management Information System for Vaccines
 * @subpackage Inventory Management
 * @author     Ajmal Hussain <ajmaleyetii@gmail.com>
 * @version    2
 */
class Model_StockBatch extends Model_Base {

    protected $_table;

    const FINISHED = "Finished";
    const STACKED = "Stacked";
    const RUNNING = "Running";
    const TOTAL = "Total";

    public function __construct() {
        parent::__construct();
        $this->_table = $this->_em->getRepository('StockBatch');
    }

    public function addStockBatch($array) {
        return ($array['rcvedit'] == "Yes") ? $this->updateBatch($array) : $this->createBatch($array);
    }

    public function autoRunningLEFOBatch($item_id) {
        $this->expiryDate = $this->isBatchExists($item_id);


        if ($this->expiryDate != false) {

            // Make stacked all the batches
            $stock_stacked = $this->_table->find(array(
                'itemPackSize' => $item_id,
                'warehouse' => $this->_identity->getWarehouseId()
            ));
            $stock_stacked->setStatus(self::STACKED);
            $this->_em->flush();

            // Make Running near to expiry batch
            $stock_running = $this->_table->find(array(
                'itemPackSize' => $item_id,
                'warehouse' => $this->_identity->getWarehouseId(),
                'expiryDate' => $this->expiryDate
            ));
            $stock_running->setStatus(self::RUNNING);
            $this->_em->flush();
            return true;
        } else {
            return FALSE;
        }
    }

    public function isBatchExists($item_id) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("MIN(sb.expiryDate) AS MinDate")
                ->from('StockBatch', 'sb')
                ->where('sb.itemPackSize =' . $item_id)
                ->andWhere('sb.warehouse =' . $this->_identity->getWarehouseId())
                ->andWhere('sb.quantity <> 0');
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row['0']['MinDate'];
        } else {
            return false;
        }
    }

    public function getBatchQuantityById($id) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('sb.quantity')
                ->from('StockBatch', 'sb')
                ->where('sb.pkId =' . $id);
        $row = $str_sql->getQuery()->getResult();

        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return FALSE;
        }
    }

    public function deleteStockBatch($id) {
        $stockBatch = $this->_table->find($id);
        $this->_em->remove($stockBatch);
        return $this->_em->flush();
    }

    function adjustQuantity($id, $qty) {
        $str_sql = $this->_em->createQueryBuilder()
                ->update('Model_StockBatch')
                ->set("quantity", '?', $qty)
                ->where("pk_id= ? ", $id);
        $str_sql->execute();
    }

    function adjustQuantityByWarehouse($batch_id) {
        $row = $this->_em->getConnection()->prepare("SELECT AdjustQty($batch_id," . $this->_identity->getWarehouseId() . ") from DUAL");
        $row->execute();
    }

    public function pickBatch($batch_id) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('number')
                ->from('Model_StockBatch')
                ->where('pk_id =' . $batch_id);
        $result = $str_sql->fetchArray();
        return $result;
    }

    /**
     * @uses API & Application
     * @return boolean
     */
    public function getItemAllBatches($wh_id) {
        $str_sql = $this->_em->getConnection()->prepare("SELECT
                                                        stock_batch.pk_id AS 'pkId',
                                                        stock_batch.number,
                                                        stock_batch.batch_master_id,
                                                        stock_batch.expiry_date AS 'expiryDate',
                                                        stock_batch.quantity,
                                                        stock_batch.`status`,
                                                        stock_batch.unit_price,
                                                        stock_batch.production_date,
                                                        stock_batch.last_update,
                                                        stock_batch.item_pack_size_id AS 'itemPackSize',
                                                        stock_batch.vvm_type_id,
                                                        stock_batch.warehouse_id,
                                                        stock_batch.stakeholder_item_pack_size_id AS 'StakeholderItemPackSizeID'
                                                        FROM
                                                        stock_batch
                                                        WHERE
                                                        stock_batch.`status` <> 'Finished' AND warehouse_id= '" . $wh_id . "'");
        $str_sql->execute();
        return $str_sql->fetchAll();
    }

    public function searchStockBatch() {
        if (!empty($this->form_values['status'])) {
            switch ($this->form_values['status']) {
                case 1:
                    $status = self::RUNNING;
                    break;
                case 2:
                    $status = self::STACKED;
                    break;
                case 3:
                    $status = self::FINISHED;
                    break;
                case 4:
                    $status = 4;
                    break;
                default:

                    break;
            }
        } else {
            $status = self::RUNNING;
        }

        $str_sql = $this->_em->createQueryBuilder()->select('DISTINCT sb.pkId,
		sb.number,
		sb.expiryDate,
		sb.status,
		sb.quantity AS BatchQty,
		ips.itemName,
		iu.itemUnitName,
                ips.numberOfDoses as description,
                sd.temporary')
                ->from('StockDetail', 'sd')
                ->innerJoin("sd.stockMaster", "sm")
                ->innerJoin("sd.stockBatch", "sb")
                ->innerJoin("sb.itemPackSize", "ips")
                ->innerJoin("ips.itemUnit", "iu")
                ->where('sb.warehouse =' . $this->_identity->getWarehouseId())
                ->andWhere('sd.temporary = 0');

        if (!empty($this->form_values['item_pack_size_id'])) {
            $str_sql->andWhere("sb.itemPackSize = " . $this->form_values['item_pack_size_id']);
        }
        if (!empty($this->form_values['number'])) {
            $str_sql->andWhere("sb.number LIKE '" . $this->form_values['number'] . "%'");
        }
        if (!empty($this->form_values['transaction_refernece'])) {
            $str_sql->andWhere("sm.transactionReference LIKE '%" . $this->form_values['transaction_refernece'] . "%'");
        }
        if ($status == 4) {

            $str_sql->andWhere("sb.status IN ('STACKED','RUNNING')");
        } else if (!empty($status)) {
            $str_sql->andWhere("sb.status = '" . $status . "'");
        } else {
            $status = self::TOTAL;
        }


        // Finished means 0 quantity, We don't need this check for Finished Qty
        if (!empty($this->form_values['status']) && $status != self::FINISHED && $status != self::TOTAL) {
            $str_sql->andWhere("sb.quantity <> 0");
        }
        //$str_sql->groupBy("sb.itemPackSize, sb.number, sb.expiryDate, sb.status");
        //echo $str_sql->getQuery()->getSql();
        //exit;

        $result = $str_sql->getQuery()->getResult();

        return $result;
    }

    public function getBatchDetail() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("sb.number,
			ips.itemName,			
                        ips.numberOfDoses as description,
			iu.pkId as itemUnitId,
			SUM(IF(sb.status = '" . self::STACKED . "', sb.quantity, 0)) as StackedQty,
			SUM(IF(sb.status = '" . self::RUNNING . "', sb.quantity, 0)) as RunningQty,
			SUM(IF(sb.status = '" . self::FINISHED . "', sb.quantity, 0)) as FinishedQty,
			SUM(IF(sb.status = '" . self::STACKED . "', 1, 0)) stacked,
			SUM(IF(sb.status = '" . self::RUNNING . "', 1, 0)) running,
			SUM(IF(sb.status = '" . self::FINISHED . "', 1, 0)) finished")
                ->from("StockBatch", "sb")
                ->innerJoin("sb.itemPackSize", "ips")
                ->innerJoin("ips.itemUnit", "iu")
                ->where("sb.itemPackSize = " . $this->form_values['item_pack_size_id'])
                ->andWhere("sb.warehouse = " . $this->_identity->getWarehouseId());
        //echo $str_sql->getQuery()->getSql();

        $result = $str_sql->getQuery()->getResult();
        return $result;
    }

    public function changeStatus() {
        $stock = $this->_table->find($this->form_values['pk_id']);
        if (count($stock) >= 1) {
            $stock->setStatus($this->form_values['status']);
            $this->_em->persist($stock);
            $this->_em->flush();
            return true;
        }
    }

    public function batchSummary() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("ips.itemName,
                        ips.numberOfDoses as description,
			SUM(sb.quantity) AS Vials,
			SUM(ips.numberOfDoses * sb.quantity) AS Doses,
                        sb.number")
                ->from("StockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->join("ips.itemUnit", "iu")
                ->where("ips.itemCategory = 1")
                ->andWhere("sb.warehouse = " . $this->_identity->getWarehouseId());

        $str_sql->groupBy("ips.pkId")
                ->orderBy("ips.listRank");

        $result = $str_sql->getQuery()->getResult();
        return $result;
    }

    public function batchSummary2() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("
                         i.description as itemName,
                        ips.numberOfDoses as description,
			SUM(sb.quantity) AS Vials,
			SUM(ips.numberOfDoses * sb.quantity) AS Doses,
                        sb.number")
                ->from("StockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->join("ips.item", 'i')
                ->join("ips.itemUnit", "iu")
                ->where("ips.itemCategory = 1")
                ->andWhere("sb.warehouse = " . $this->_identity->getWarehouseId());

        $str_sql->groupBy("ips.pkId")
                ->groupBy("ips.item")
                ->orderBy("ips.listRank");
//echo $str_sql->getQuery()->getSql();

        $result = $str_sql->getQuery()->getResult();
        return $result;
    }

    public function batchSummaryBefore() {
//        $sql = 'SELECT
//                batch_summary_before_adjust.product,
//                batch_summary_before_adjust.quantity
//                FROM
//                batch_summary_before_adjust';

        $sql = 'SELECT
                        items.description AS product,
                        Sum(
                                batch_summary_before_adjust.quantity
                        ) AS quantity,
                        Sum(
                                batch_summary_before_adjust.quantity
                        ) * item_pack_sizes.number_of_doses AS quantityD
                FROM
                        batch_summary_before_adjust
                INNER JOIN item_pack_sizes ON batch_summary_before_adjust.product_id = item_pack_sizes.pk_id
                INNER JOIN items ON item_pack_sizes.item_id = items.pk_id
                GROUP BY
                        items.pk_id';

        $row = $this->_em->getConnection()->prepare($sql);
        $row->execute();
        $data = $row->fetchAll();

        foreach ($data as $r) {
            $result[$r['product']] = array(
                'quantity' => $r['quantity'],
                'quantityD' => $r['quantityD']
            );
        }

        return $result;
    }

    public function stakeholderProductSummary() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("ips.itemName,
			SUM(sb.quantity) AS Vials,
			SUM(ips.numberOfDoses * sb.quantity) AS Doses,
                        s.stakeholderName")
                ->from("StockBatch", "sb")
                ->innerJoin("sb.stakeholderItemPackSize", "sips")
                ->innerJoin("sips.itemPackSize", "ips")
                ->innerJoin("sips.stakeholder", "s")
                ->where("s.stakeholderType = 3")
                ->andWhere("sb.warehouse = " . $this->_identity->getWarehouseId())
                ->groupBy("ips.itemName,s.stakeholderName")
                ->orderBy("ips.listRank", "ASC")
                ->having("Vials > 0");

        $result = $str_sql->getQuery()->getResult();
        return $result;
    }

    public function getAllRunningBatches() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("sb.number,
			sb.pkId,
			sb.expiryDate,
			sb.quantity")
                ->from("StockBatch", "sb")
                ->where("sb.quantity <> 0 ")
                ->andWhere("sb.status = '" . self::RUNNING . "'")
                ->andWhere("sb.itemPackSize = " . $this->form_values['item_pack_size_id'])
                ->andWhere("sb.warehouse = " . $this->_identity->getWarehouseId())
                ->orderBy("sb.quantity", "DESC");
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    /**
     * @uses API & Application
     * @return boolean
     */
    public function getAllBatchesByItemId() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("sb.pkId,sb.number,
			sb.expiryDate,
			sb.quantity")
                ->from("StockBatch", "sb")
                ->andWhere("sb.itemPackSize = " . $this->form_values['item_id'])
                ->andWhere("sb.warehouse = " . $this->_identity->getWarehouseId());
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getBatchesByItem() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("sb")
                ->from("StockBatch", "sb")
                ->andWhere("sb.itemPackSize = " . $this->form_values['item_id'])
                ->andWhere("sb.warehouse = " . $this->form_values['wh_id'])
                ->orderBy("sb.number", "ASC");
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getBatchExpiry() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("sb.expiryDate,
			sb.quantity,
                        ips.pkId as itemCategory")
                ->from("StockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->join("ips.itemCategory", "ic")
                ->where("sb.pkId = " . $this->form_values['pk_id']);
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            $data = array(
                'date' => $row[0]['expiryDate'],
                'qty' => $row[0]['quantity'],
                'cat' => $row[0]['itemCategory']
            );
            return $data;
        } else {
            return false;
        }
    }

    public function getBatchAvailableBalanceExpiry() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("DATE_FORMAT(sb.expiryDate,'%d %M, %Y') as expiryDate,
			SUM(sd.quantity) as quantity,
                        ips.pkId as itemCategory")
                ->from("StockDetail", "sd")
                ->join("sd.stockBatch", "sb")
                ->join("sd.stockMaster", "sm")
                ->join("sb.itemPackSize", "ips")
                ->join("ips.itemCategory", "ic")
                ->where("sb.pkId = " . $this->form_values['pk_id'])
                ->andWhere("DATE_FORMAT(sm.transactionDate,'%Y-%m-%d') <= '" . $this->form_values['trans_date'] . "'");

        $row = $str_sql->getQuery()->getResult();
        $current_qty = $this->getBatchCB();
        $pipeline_qty = $this->getBatchPipelineQty();

        if (!empty($row) && count($row) > 0) {
            if ($row[0]['quantity'] > $current_qty) {
                $quantity = $current_qty;
            } else {
                $quantity = $row[0]['quantity'];
            }

            $quantity = $quantity - $pipeline_qty;

            $data = array(
                'date' => $row[0]['expiryDate'],
                'qty' => ($quantity > 0) ? number_format($quantity) : 0,
                'cat' => $row[0]['itemCategory']
            );
            return $data;
        } else {
            return false;
        }
    }

    public function getBatchCB() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("sb.quantity")
                ->from("StockBatch", "sb")
                ->where("sb.pkId = " . $this->form_values['pk_id']);

        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row[0]['quantity'];
        } else {
            return 0;
        }
    }

    public function getBatchPipelineQty() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("SUM(pc.quantity) as qty")
                ->from("PipelineConsignments", "pc")
                ->where("pc.stockBatch = " . $this->form_values['pk_id'])
                ->andWhere("pc.transactionType = 2")
                ->andWhere("pc.status != 'Received'");
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row[0]['qty'];
        } else {
            return 0;
        }
    }

    public function editBatchNo() {
        $stock_detail = new Model_StockDetail();
        $stock_detail->form_values['pk_id'] = $this->form_values['pk_id'];
        $quantity_and_batch = $stock_detail->getQuantityById($this->form_values['pk_id']);
        // echo $quantity_and_batch['number']."<br>" ;
        // echo $this->form_values['number'];
        //exit;
        if ($quantity_and_batch['number'] != $this->form_values['number']) {


            $data = array(
                'number' => $quantity_and_batch['number'],
                'batch_id' => $quantity_and_batch['stock_batch_id'],
                'item_id' => $quantity_and_batch['item_pack_size_id'],
            );
            // check batch is new or old
            $batch_id = $this->checkNewBatch($data);

            if ($batch_id === 0) {
                // if batch is new then  new batch
                $data_pre = array(
                    'number' => $this->form_values['number'],
                    'item_id' => $quantity_and_batch['item_pack_size_id'],
                );
                $batch_id_previous = $this->checkBatch($data_pre);
                if ($batch_id_previous === 0) {
                    $this->form_values['pk_id'] = $quantity_and_batch['stock_batch_id'];
                    return $this->updateName();
                } else {
                    $stock_detail->updateDetail($quantity_and_batch['stock_detail'], $batch_id_previous);
                    $this->adjustQuantityByWarehouse($batch_id_previous);
                    $this->batch_id = $quantity_and_batch['stock_batch_id'];
                    return $this->updateWarehouseId();
                }
            } else {
                $data_array = array(
                    'number' => $this->form_values['number'],
                    'item_id' => $quantity_and_batch['item_pack_size_id'],
                );
                $batch_id_pre = $this->checkBatch($data_array);
                if ($batch_id_pre === 0) {

                    $data_pr = array(
                        'number' => $this->form_values['number'],
                        'item_id' => $quantity_and_batch['item_pack_size_id'],
                        'expiry_date' => $quantity_and_batch['expiryDate'],
                        'quantity' => $quantity_and_batch['quantity'],
                        'vvm_type_id' => $quantity_and_batch['vvmTypeId'],
                        'unit_price' => $quantity_and_batch['unitPrice'],
                        'manufacturer_id' => $quantity_and_batch['stakeholderItemPackSizeId'],
                    );
                    // App_Controller_Functions::pr($data_pr);
                    $batch_id_new = $this->createBatch($data_pr);
                    $stock_detail->updateDetail($quantity_and_batch['stock_detail'], $batch_id_new);
                    $this->adjustQuantityByWarehouse($quantity_and_batch['stock_batch_id']);
                } else {
                    $stock_detail->updateDetail($quantity_and_batch['stock_detail'], $batch_id_pre);
                    $this->adjustQuantityByWarehouse($quantity_and_batch['stock_batch_id']);
                    $this->adjustQuantityByWarehouse($batch_id_pre);
                    // $this->batch_id = $quantity_and_batch['stock_batch_id'];
                    // return $this->updateWarehouseId();
                }
            }
        }
    }

    public function updateName() {
        $stock = $this->_table->find($this->form_values['pk_id']);
        $stock->setNumber(strtoupper($this->form_values['number']));
        $this->_em->persist($stock);
        return $this->_em->flush();
    }

    public function updateWarehouseId() {

        $querypro = "Update stock_batch set warehouse_id='0' where stock_batch.pk_id=$this->batch_id  ";

        $this->_em = Zend_Registry::get('doctrine');
        $row = $this->_em->getConnection()->prepare($querypro);

        $result = $row->execute();
        // App_Controller_Functions::pr($result);
    }

    public function createBatch($array) {

        // App_Controller_Functions::pr($array);
        $batchid = $this->checkBatch($array);
        if ($batchid === 0) {
            $wh_id = $this->_identity->getWarehouseId();

            $stock_batch = new StockBatch();
            $stock_batch->setNumber(strtoupper($array['number']));
            $stock_batch->setExpiryDate(new \DateTime(App_Controller_Functions::dateToDbFormat($array['expiry_date'])));
            $item_id = $this->_em->getRepository('ItemPackSizes')->find($array['item_id']);
            $stock_batch->setItemPackSize($item_id);
            $stock_batch->setQuantity(str_replace(",", "", $array['quantity']));
            $stock_batch->setStatus(self::STACKED);
            if (!empty($array['production_date'])) {
                $stock_batch->setProductionDate(new \DateTime(App_Controller_Functions::dateToDbFormat($array['production_date'])));
            }
            if (!empty($array['vvm_type_id'])) {
                $vvm_type_id = $this->_em->getRepository('VvmTypes')->find($array['vvm_type_id']);
                $stock_batch->setVvmType($vvm_type_id);
            }
            $stock_batch->setUnitPrice($array['unit_price']);
            $warehouse_id = $this->_em->getRepository('Warehouses')->find($wh_id);
            $stock_batch->setWarehouse($warehouse_id);

            if (!empty($array['manufacturer_id'])) {
                $stakeholder_item_pack_size = $this->_em->getRepository('StakeholderItemPackSizes')->find($array['manufacturer_id']);
                if ($stakeholder_item_pack_size->getItemPackSize()->getPkId() == $array['item_id']) {
                    $stock_batch->setStakeholderItemPackSize($stakeholder_item_pack_size);
                } else {
                    $add_sips = clone $stakeholder_item_pack_size;
                    $add_sips->setItemPackSize($item_id);
                    $this->_em->persist($add_sips);
                    $this->_em->flush();
                    $stock_batch->setStakeholderItemPackSize($add_sips);
                }
            }

            $this->_em->persist($stock_batch);
            $this->_em->flush();
            $batchid = $stock_batch->getPkId();

            if ($wh_id == Model_Warehouses::FEDERAL_WHID) {
                $stock_batch->setBatchMasterId($batchid);
                $this->_em->persist($stock_batch);
                $this->_em->flush();
            }

            if ($batchid) {
                return $batchid;
            } else {
                return false;
            }
        } else {
            return $batchid;
        }
    }

    public function updateBatch($array) {
        $wh_id = $this->_identity->getWarehouseId();

        $stock_batch = $this->_table->find($array['stock_batch_id']);
        $stock_batch->setNumber(strtoupper($array['number']));
        $stock_batch->setExpiryDate(new \DateTime(App_Controller_Functions::dateToDbFormat($array['expiry_date'])));
        $item_id = $this->_em->getRepository('ItemPackSizes')->find($array['item_id']);
        $stock_batch->setItemPackSize($item_id);
        $stock_batch->setQuantity(str_replace(",", "", $array['quantity']));
        $stock_batch->setStatus(self::STACKED);
        $stock_batch->setProductionDate(new \DateTime(App_Controller_Functions::dateToDbFormat($array['production_date'])));

        if (!empty($array['vvm_type_id'])) {
            $vvm_type_id = $this->_em->getRepository('VvmTypes')->find($array['vvm_type_id']);
            $stock_batch->setVvmType($vvm_type_id);
        }

        $stock_batch->setUnitPrice($array['unit_price']);
        $warehouse_id = $this->_em->getRepository('Warehouses')->find($wh_id);
        $stock_batch->setWarehouse($warehouse_id);
        $stakeholder_item_pack_size = $this->_em->getRepository('StakeholderItemPackSizes')->find($array['manufacturer_id']);
        $stock_batch->setStakeholderItemPackSize($stakeholder_item_pack_size);

        $this->_em->persist($stock_batch);
        $this->_em->flush();

        if ($wh_id == Model_Warehouses::FEDERAL_WHID) {
            $stock_batch->setBatchMasterId($stock_batch->getPkId());
            $this->_em->persist($stock_batch);
            $this->_em->flush();
        }

        return $stock_batch->getPkId();
    }

    public function checkBatch($array) {

        $role_id = $this->_identity->getRoleId();

        if (isset($array['wh_id']) && !empty($array['wh_id'])) {
            $wh_id = $array['wh_id'];
        } else {
            $wh_id = $this->_identity->getWarehouseId();
        }

        $stock_batch = $this->_em->getRepository("StockBatch")->findOneBy(array(
            "number" => $array['number'],
            "itemPackSize" => $array['item_id'],
            "warehouse" => $wh_id
        ));

        if (count($stock_batch) > 0) {
            $this->adjustQuantityByWarehouse($stock_batch->getPkId());

            if ($stock_batch->getStatus() == 'Finished' && $role_id == 3 && !empty($array['expiry_date'])) {
                $stock_batch->setExpiryDate(new \DateTime(App_Controller_Functions::dateToDbFormat($array['expiry_date'])));
                $stock_batch->setProductionDate(new \DateTime(App_Controller_Functions::dateToDbFormat($array['production_date'])));
                $this->_em->persist($stock_batch);
                $this->_em->flush();
            }
            return $stock_batch->getPkId();
        } else {
            return 0;
        }
    }

    public function checkNewBatch($array) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select("sd.pkId as detailId,sb.pkId as batchId")
                ->from("StockDetail", 'sd')
                ->join("sd.stockMaster", "sm")
                ->join("sm.transactionType", "tt")
                ->join("sd.stockBatch", 'sb')
                ->join("sb.itemPackSize", 'ips')
                ->where("sb.pkId = '" . $array['batch_id'] . "'")
                ->andWhere("tt.pkId=1 ")
                ->orWhere("tt.pkId=2 ")
                ->andWhere("sm.draft=0")
                ->andWhere("sb.itemPackSize = " . $array['item_id'])
                ->andWhere("sb.warehouse = " . $this->_identity->getWarehouseId());

        //  echo $str_sql->getQuery()->getSql();
        //   exit;
        $row = $str_sql->getQuery()->getResult();

        if (!empty($row) && count($row) > 0) {
            $this->adjustQuantityByWarehouse($row[0]['batchId']);
            $batch_id = $row[0]['batchId'];
            return $batch_id;
        } else {
            return 0;
        }
    }

    public function getBatchNumberByProducts() {

        $str_sql = $this->_em->createQueryBuilder()
                ->select('sb.pkId', 'sb.number')
                ->from("StockBatch", "sb")
                ->where("sb.itemPackSize = " . $this->form_values['item_pack_size_id']);
        $result = $str_sql->getQuery()->getResult();

        return $result;
    }

    public function getStockBatchAndDetailById() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('ips.itemName, sd.quantity, sd.vvmStage, sb.expiryDate, sb.number')
                ->from("StockDetail", "sd")
                ->leftJoin("sd.stockBatch", 'sb')
                ->leftJoin("sb.itemPackSize", 'ips')
                ->where("sd.pkId = " . $this->form_values['stock_detail']);
        $result = $str_sql->getQuery()->getResult();
        return $result[0];
    }

    public function showBatch() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('Sum(sd.quantity) AS total,
                        ips.quantityPerPack')
                ->from("StockDetail", "sd")
                ->join("sd.stockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->where("sb.pkId =" . $this->form_values['stock_batch_id']);
        $result = $str_sql->getQuery()->getResult();

        $str_sql2 = $this->_em->createQueryBuilder()
                ->select('Sum(p.quantity) AS placement_qty')
                ->from("Placements", "p")
                ->where("p.stockBatch =" . $this->form_values['stock_batch_id']);
        $result2 = $str_sql2->getQuery()->getResult();

        $total = $result[0]['total'] - $result2[0]['placement_qty'];
        return $total;
    }

    public function getBatches() {
        return $this->_table->findAll();
    }

    public function getItemBatches() {
        $wh_id = $this->form_values['wh_id'];

        $str_sql = $this->_em->createQueryBuilder()
                ->select("sb.pkId,sb.number,
			sb.expiryDate,
                        ips.pkId as itemPackSize,
                        sips.pkId as StakeholderItemPackSizeID,
			sb.quantity")
                ->from("StockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->join("sb.stakeholderItemPackSize", "sips")
                ->where("sb.expiryDate >= " . date("Y-m-d"))
                ->andWhere("sb.warehouse = " . $wh_id)
                ->andWhere("sb.status != 'Finished'");
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function stockGatepassSearch() {
        //$wh_id = $this->_identity->getWarehouseId();
        if (!empty($this->form_values['vehicle_type_id'])) {
            $where[] = "gpv.vehicleType= '" . $this->form_values['vehicle_type_id'] . "'";
        }

        if (!empty($this->form_values['item_pack_size_id'])) {
            $where[] = "ip.pkId = '" . $this->form_values['item_pack_size_id'] . "'";
        }

        if (!empty($this->form_values['stock_batch_id'])) {
            $where[] = "sd.stockBatch = '" . $this->form_values['stock_batch_id'] . "'";
        }


        if (!empty($this->form_values['date_from']) && !empty($this->form_values['date_to'])) {
            $where[] = "DATE_FORMAT(gpm.transactionDate,'%Y-%m-%d') BETWEEN '" . $this->form_values['date_from'] . "' AND '" . $this->form_values['date_to'] . "'";
        }
        $str_sqlee = $this->_em->createQueryBuilder()
                ->select(" gpm.number as gpmnumber,gpm.transactionDate,"
                        . " gpv.number as gpnumber,"
                        . " sb.number,"
                        . "ip.itemName")
                ->from("GatepassDetail", "gpd")
                ->join("gpd.gatepassMaster", "gpm")
                ->join("gpm.gatepassVehicle", "gpv")
                ->join("gpd.stockDetail", "sd")
                ->join("sd.stockBatch", "sb")
                ->join("sb.stakeholderItemPackSize", "sip")
                ->join("sip.itemPackSize", "ip");
        if (is_array($where)) {
            $where_s = implode(" AND ", $where);
            $str_sqlee->where($where_s);
        }
        //->orderBy("s.transactionNumber", "ASC");
        //echo $str_sqlee->getQuery()->getSql();exit;
        $result12 = $str_sqlee->getQuery()->getResult();

        //print_r($result12);exit;

        return $result12;
    }

    function editBatchExpiry() {
        $id = $this->form_values['id'];
        $date = $this->form_values['date'];

        $batch = $this->_em->getRepository("StockBatch")->find($id);
        if (count($batch) > 0) {
            $batch->setExpiryDate(new DateTime(date(App_Controller_Functions::dateToDbFormat($date))));
        }
        $this->_em->persist($batch);
        $this->_em->flush();

        return true;
    }

    function getPlacementHistory() {

        $sql = "SELECT
cold_chain.asset_id,
placement_summary.quantity,
placement_summary.vvm_stage,
placement_summary.batch_number
FROM
placement_summary
INNER JOIN placement_locations ON placement_summary.placement_location_id = placement_locations.pk_id
INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
WHERE
placement_summary.stock_batch_id = " . $this->form_values['batch_id'] . " ";

//        $sql = "SELECT
//                ROUND(SUM(placements.quantity) / stakeholder_item_pack_sizes.quantity_per_pack) AS quantity,
//                placements.vvm_stage,
//                cold_chain.asset_id,
//                cold_chain.pk_id,
//                stakeholder_item_pack_sizes.quantity_per_pack
//            FROM
//                placements
//            INNER JOIN cold_chain ON placements.placement_location_id = cold_chain.pk_id
//            INNER JOIN non_ccm_locations ON non_ccm_locations.warehouse_id = cold_chain.warehouse_id
//            INNER JOIN stock_batch ON stock_batch.pk_id = placements.stock_batch_id
//            INNER JOIN stakeholder_item_pack_sizes ON stock_batch.item_pack_size_id = stakeholder_item_pack_sizes.item_pack_size_id
//            WHERE
//                stock_batch.pk_id = " . $this->form_values['batch_id'] . "
//            AND non_ccm_locations.warehouse_id = " . $this->_identity->getWarehouseId() . "
//            GROUP BY
//                non_ccm_locations.location_name,
//                placements.vvm_stage";
        //echo $sql;die;
        $row = $this->_em->getConnection()->prepare($sql);
        $row->execute();
        return $row->fetchAll();
    }

    function getPlacementVvmStage() {
        $sql = "SELECT
              SUM(placement_summary.quantity) as quantity,
              placement_summary.vvm_stage
              FROM
              placement_summary
              INNER JOIN non_ccm_locations ON placement_summary.placement_location_id = non_ccm_locations.pk_id
              where placement_summary.stock_batch_id = " . $this->form_values['batch_id'] . "
              AND non_ccm_locations.warehouse_id = " . $this->_identity->getWarehouseId() . "
              Group by placement_summary.vvm_stage";

        $row = $this->_em->getConnection()->prepare($sql);
        $row->execute();
        return $row->fetchAll();
    }

    public function getIssueReceiveByDate() {
        $wh_id = $this->_identity->getWarehouseId();
        $from_date = $this->form_values['from_date'];
        $to_date = $this->form_values['to_date'];

        $sql = "SELECT
                Sum(IF (stock_master.transaction_type_id = 1, stock_detail.quantity, 0)) AS Rcv,
                Sum(IF (stock_master.transaction_type_id = 1, stock_detail.quantity, 0)) * item_pack_sizes.number_of_doses AS RcvD,
                Sum(IF (stock_master.transaction_type_id = 2, stock_detail.quantity, 0)) AS Issue,
                Sum(IF (stock_master.transaction_type_id = 2, stock_detail.quantity, 0)) * item_pack_sizes.number_of_doses AS IssueD,
                Sum(IF (stock_master.transaction_type_id IN (6,9),stock_detail.quantity,0)) AS Expired,
                Sum(IF (stock_master.transaction_type_id IN (6,9),stock_detail.quantity,0)) * item_pack_sizes.number_of_doses AS ExpiredD,
                Sum(IF (stock_master.transaction_type_id IN (1,2,6,9),stock_detail.quantity,0)) AS total,
                Sum(IF (stock_master.transaction_type_id IN (1,2,6,9),stock_detail.quantity,0)) * item_pack_sizes.number_of_doses AS totalD,
                items.description AS item_name
               FROM
                stock_master
               INNER JOIN stock_detail ON stock_detail.stock_master_id = stock_master.pk_id
               INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
               INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
               INNER JOIN items ON item_pack_sizes.item_id = items.pk_id
               WHERE
                DATE_FORMAT(stock_master.transaction_date,'%Y-%m-%d') BETWEEN '$from_date'
               AND '$to_date'
               AND stock_batch.warehouse_id = $wh_id
               GROUP BY
                items.pk_id
               ORDER BY
                item_pack_sizes.list_rank ASC";
        //echo $sql;
        $row = $this->_em->getConnection()->prepare($sql);
        $row->execute();
        $result = $row->fetchAll();

        foreach ($result as $r) {
            $data[$r['item_name']] = array(
                'receive' => $r['Rcv'],
                'receiveD' => $r['RcvD'],
                'issue' => ABS($r['Issue']),
                'issueD' => ABS($r['IssueD']),
                'total' => $r['total'],
                'totalD' => $r['totalD'],
                'expired' => ABS($r['Expired']),
                'expiredD' => ABS($r['ExpiredD'])
            );
        }

        return $data;
    }

    public function getBatchLocations() {
        $batch_id = $this->form_values['batch_id'];

        $sql = "SELECT
                        placements.placement_location_id,
                        SUM(placements.quantity) AS quantity,
                        placements.vvm_stage,
                        cold_chain.asset_id
                FROM
                        placements
                INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
                INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
                WHERE
                        placements.stock_batch_id = $batch_id
                GROUP BY
                        placements.placement_location_id,
                        placements.vvm_stage ORDER BY cold_chain.asset_id";

        $row = $this->_em->getConnection()->prepare($sql);
        $row->execute();
        $result = $row->fetchAll();

        return $result;
    }

    public function getBactchLocationDryStore() {
        $batch_id = $this->form_values['batch_id'];

        $sql = "SELECT
                        placements.placement_location_id,
                        SUM(placements.quantity) AS quantity,
                        'NA' vvm_stage,
                        non_ccm_locations.location_name asset_id
                FROM
                        placements
                INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
                INNER JOIN non_ccm_locations ON placement_locations.location_id = non_ccm_locations.pk_id
                WHERE
                        placements.stock_batch_id = $batch_id
                        and placement_locations.location_type = 100
                GROUP BY
                        placements.placement_location_id,
                        placements.vvm_stage ORDER BY non_ccm_locations.location_name  
               ";

        $row = $this->_em->getConnection()->prepare($sql);
        $row->execute();
        $result = $row->fetchAll();

        return $result;
    }

    public function getProductLocations() {
        $product_id = $this->form_values['product_id'];

        $sql = "SELECT
                        placements.placement_location_id,
                        SUM(placements.quantity) AS quantity,
                        cold_chain.asset_id,
                        MAX(placements.vvm_stage) as vvm_stage
                FROM
                        placements
                INNER JOIN placement_locations ON placements.placement_location_id = placement_locations.pk_id
                INNER JOIN cold_chain ON placement_locations.location_id = cold_chain.pk_id
                INNER JOIN stock_batch ON placements.stock_batch_id = stock_batch.pk_id
                WHERE
                        stock_batch.item_pack_size_id = $product_id
                GROUP BY
                        placements.placement_location_id ORDER BY cold_chain.asset_id";

        $row = $this->_em->getConnection()->prepare($sql);
        $row->execute();
        $result = $row->fetchAll();

        return $result;
    }

}
