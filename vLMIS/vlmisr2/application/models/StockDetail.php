<?php

/**
 * Model_StockDetail
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Logistics Management Information System for Vaccines
 * @subpackage Inventory Management
 * @author     Ajmal Hussain <ajmaleyetii@gmail.com>
 * @version    2
 */
class Model_StockDetail extends Model_Base {

    private $_table;

    public function __construct() {
        parent::__construct();
        $this->_table = $this->_em->getRepository('StockDetail');
    }

    public function addStockDetail($array) {
        $em = Zend_Registry::get('doctrine');

        if ($array['rcvedit'] == "Yes") {
            $stock_detail = $this->_em->getRepository("StockDetail")->find($array['stock_detail_id']);
        } else {
            $stock_detail = new StockDetail();
        }

        $type = $array['transaction_type_id'];
        $type1 = $type;
        $quantity = str_replace(",", "", $array['quantity']);

        if ($type == Model_TransactionTypes::TRANSACTION_ISSUE) {
            $quantity = "-" . $quantity;
        }


        if (!empty($array['hdn_stock_id'])) {
            $stock_id = $array['hdn_stock_id'];
        } else {
            $stock_id = $array['stock_master_id'];
        }

        $stock_master_id = $this->_em->getRepository('StockMaster')->find($stock_id);
        $stock_detail->setStockMaster($stock_master_id);
        if (!empty($array['item_unit_id'])) {
            $item_unit_id = $this->_em->getRepository('ItemUnits')->find($array['item_unit_id']);
            $stock_detail->setItemUnit($item_unit_id);
        }
        $stock_detail->setQuantity($quantity);
        if ($array['type'] != 's') {
            $stock_detail->setTemporary(1);
        }
        $stock_detail->setVvmStage($array['vvm_stage']);
        //$type = $array['transaction_type_id'];

        $stock_detail->setAdjustmentType("$type");
        //$stock_detail->setStakeholderItem($array['manufacturer_id']);

        if ($type == 1) {
            //this IF is for stock receive
            $stock_batch_id = $this->_em->getRepository('StockBatch')->find(
                    array('number' => $array['number'],
                        'itemPackSize' => $array['item_id'],
                        'warehouse' => $this->_identity->getWarehouseId())
            );
            // echo $stock_batch_id->getPkId();
            // exit;
            // App_Controller_Functions::pr($stock_batch_id);
            $stock_detail->setStockBatch($stock_batch_id);

            $stock_detail->setIsReceived(1);
        } else if ($type == 2) {
            //this ELSE IF is for stock issue
            $stock_batch_id = $this->_em->getRepository('StockBatch')->find($array['stock_batch_id']);
            $stock_detail->setStockBatch($stock_batch_id);
            $stock_detail->setIsReceived(0);
        }

        $this->_em->persist($stock_detail);
        $this->_em->flush();
        $query = "SELECT AdjustQty(" . $stock_batch_id->getPkId() . "," . $this->_identity->getWarehouseId() . ") FROM DUAL";
        $str_sql = $em->getConnection()->prepare($query);
        $str_sql->execute();
        return $stock_detail->getPkId();
    }

    public function updateStockDetailTemp($id) {
        $row = $this->_em->getConnection()->prepare("UPDATE stock_detail SET `temporary` = 0 WHERE stock_master_id = $id");
        $row->execute();
    }

    public function getQuantityById($id) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('sd.pkId as stockDetail,sd.quantity,sb.pkId as stockBatchId,sb.number,s.pkId as stockMasterId,ips.pkId as itemPackSize,sb.expiryDate,vt.pkId as vvmTypeId,sips.pkId as stakeholderItemPackSizeId,sb.unitPrice')
                ->from('StockDetail', 'sd')
                ->join('sd.stockMaster', 's')
                ->join('sd.stockBatch', 'sb')
                ->join('sb.vvmType', 'vt')
                ->leftjoin('sb.stakeholderItemPackSize', 'sips')
                ->join('sb.itemPackSize', 'ips')
                ->where('sd.pkId =' . $id);
        //echo $str_sql->getQuery()->getSql();
        //exit;
        $row = $str_sql->getQuery()->getResult();

        return $data = array(
            'number' => $row[0]['number'],
            'quantity' => $row[0]['quantity'],
            'stock_batch_id' => $row[0]['stockBatchId'],
            'stock_master_id' => $row[0]['stockMasterId'],
            'item_pack_size_id' => $row[0]['itemPackSize'],
            'stock_detail' => $row[0]['stockDetail'],
            'expiryDate' => $row[0]['expiryDate'],
            'vvmTypeId' => $row[0]['vvmTypeId'],
            'stakeholderItemPackSizeId' => $row[0]['stakeholderItemPackSizeId'],
            'unitPrice' => $row[0]['unitPrice']
        );
    }

    public function deleteStockDetail($id) {
        $stockdetail = $this->_table->find($id);
        $this->_em->remove($stockdetail);
        $this->_em->flush();
        return true;
    }

    public function deleteIssue($id) {
        $stock_batch = new Model_StockBatch();
        $stock_master = new Model_StockMaster();

        $result = $this->getQuantityById($id);

        $qty = $result['quantity'];
        $batch_id = $result['stock_batch_id'];
        $stock_batch->form_values['pk_id'] = $batch_id;
        $stock_batch->form_values['status'] = Model_StockBatch::RUNNING;
        $stock_batch->changeStatus();

        $del = $this->deleteStockDetail($id);
        $del_master = $stock_master->deleteStockMaster($result['stock_master_id']);

        $stock_batch->adjustQuantityByWarehouse($batch_id);

        if ($del) {
            return true;
        } else {
            return FALSE;
        }
    }

    public function editQuantity() {
        $stock_batch = new Model_StockBatch;
        $entered_quantity = $this->form_values['quantity'];
        $id = $this->form_values['pk_id'];

        $result = $this->getQuantityById($id);
        $batch_id = $result['stock_batch_id'];

        $this->adjustQuantity($id, $entered_quantity);
        $stock_batch->adjustQuantityByWarehouse($batch_id, $this->_identity->getWarehouseId());
    }

    public function adjustQuantity($id, $qty) {
        $stock = $this->_table->find($id);
        $stock->setQuantity($qty);
        $this->_em->persist($stock);
        return $this->_em->flush();
    }

    public function findByStockId() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('d.pkId,sb.pkId as batchId,'
                        . 'iu.pkId as itemUnit,d.quantity,d.temporary,d.vvmStage,'
                        . 'd.isReceived,d.adjustmentType,w.pkId as toWarehouse,fw.pkId as fromWarehouse')
                ->from("StockDetail", "d")
                ->join("d.stockBatch", "sb")
                ->join("d.itemUnit", "iu")
                ->join("d.stockMaster", "m")
                ->join("m.toWarehouse", "w")
                ->join("m.fromWarehouse", "fw")
                ->where('m.pkId =' . $this->pkId);

        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function findByDetailId($id) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('d.pkId,sb.pkId as stockBatch,'
                        . 'iu.pkId as itemUnit,d.quantity,d.temporary,d.vvmStage,'
                        . 'd.isReceived,d.adjustmentType,w.pkId as toWarehouse')
                ->from('StockDetail', 'd')
                ->join("d.stockBatch", "sb")
                ->join("d.itemUnit", "iu")
                ->join("d.stockMaster", "m")
                ->join("m.toWarehouse", "w")
                ->where('d.pkId =' . $id);
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function stockReceived($id) {
        $stock_detail = $this->_table->find($id);
        $stock_detail->setIsReceived(1);
        $this->_em->persist($stock_detail);
        return $this->_em->flush($stock_detail);
    }

    public function getBatchDetail($id) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('sb.batchMasterId, sb.number,sb.expiryDate,ips.pkId as itemPackSize,
                        sb.unitPrice,sb.productionDate,vt.pkId as vvmType ,sd.quantity, sips.pkId as stakeholderItemPackSize')
                ->from("StockDetail", "sd")
                ->join("sd.stockBatch", "sb")
                ->join("sb.stakeholderItemPackSize", "sips")
                ->join("sb.itemPackSize", "ips")
                ->join("sb.vvmType", "vt")
                ->where("sd.pkId =  $id ");
        $row = $str_sql->getQuery()->getResult();
        if (!empty($row) && count($row) > 0) {
            return $row;
        } else {
            return false;
        }
    }

    public function getUnTotalQuantityByBatch($id) {

        // App_Controller_Functions::pr($this->form_values);
        $str_sql = $this->_em->createQueryBuilder()
                ->select('Sum(sd.quantity) AS total,
                        ips.quantityPerPack')
                ->from("StockDetail", "sd")
                ->join("sd.stockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->where("sb.pkId ='  " . $this->form_values['batchId'] . "'")
                ->andwhere("sd.pkId =" . $id);
        $result = $str_sql->getQuery()->getResult();
        $sql = "SELECT
                        sum(placements.quantity) as sum
                        FROM
                        placements
                        INNER JOIN stock_detail ON placements.stock_detail_id = stock_detail.pk_id
                        WHERE
                        placements.stock_batch_id ='" . $this->form_values['batchId'] . "' AND
                        placements.stock_detail_id = " . $id;
        $em = Zend_Registry::get('doctrine');
        $row = $em->getConnection()->prepare($sql);
        $row->execute();
        $res = $row->fetchAll();
        $result2 = $res[0]['sum'];
        $total = $result[0]['total'] - $result2;  //50-10 = 40pq
        $return['unallocated_qty'] = $total / $result[0]['quantityPerPack']; //40/10=4 unaloc
        $return['product_qty'] = $total; //40

        return $return;
    }

    public function getTotalQuantityByBatch($id = NULL) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('Sum(sd.quantity) AS total,
                        ips.quantityPerPack')
                ->from("StockDetail", "sd")
                ->join("sd.stockBatch", "sb")
                ->join("sb.itemPackSize", "ips")
                ->where("sb.pkId ='" . $this->form_values['batchId'] . "'")
                ->andwhere("sd.pkId =" . $id);
        $result = $str_sql->getQuery()->getResult();
        $str_qry = "SELECT
                    sum(placements.quantity) as sum
                FROM
                    placements
                INNER JOIN stock_detail ON placements.stock_detail_id = stock_detail.pk_id
                WHERE
                    placements.stock_batch_id ='" . $this->form_values['batchId'] . "' AND
                    placements.stock_detail_id = " . $id;
        $em = Zend_Registry::get('doctrine');
        $row = $em->getConnection()->prepare($str_qry);
        $row->execute();
        $res = $row->fetchAll();
        $result2 = $res[0]['sum'];

        $total = $result[0]['total'] - $result2;  //50-40 = 10pq
        // echo $total;exit;
        $return['unallocated_qty'] = $total / $result[0]['quantityPerPack']; //10/10=1 unaloc
        $return['product_qty'] = $total; //10

        return $return;
    }

    public function getTotalQuantity() {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('sum(sd.quantity) quantity')
                ->from("StockDetail", "sd")
                ->where("sd.stockBatch =" . $this->form_values['stock_batch_id']);
        $result = $str_sql->getQuery()->getResult();
        return $result[0]['quantity'];
    }

    public function quantityDataIssueno($stoc_mas) {
        $wh_id = $this->_identity->getWarehouseId();
//        $str_sql = $this->_em->createQueryBuilder()
//                ->select('sd.pkId,sd.quantity,sb.pkId as stcbacPk,sb.number,ips.pkId as itmPk,ips.itemName,sm.pkId as stcmasPk')
//                ->from('StockDetail', 'sd')
//                ->join("sd.stockBatch", "sb")
//               ->join("sb.itemPackSize", "ips")
//                ->join("sd.stockMaster", "sm")
//                ->where('sd.stockMaster =' . 18);
//               //->wherein('sd.stockMaster' . $stoc_mas);  
//       echo $str_sql->getQuery()->getSql();exit;
//        $row = $str_sql->getQuery()->getResult();
//        if (!empty($row) && count($row) > 0) {
//            return $row;
//        } else {
//            return false;  
//        }       
        $qr = ' ';
        end($stoc_mas);
        $count = count($stoc_mas);
        foreach ($stoc_mas as $key => $value):
            $qr .= $value . '  ';
            if ($value != end($stoc_mas))
                $qr .= ' , ';
        endforeach;
//        echo $str_qry = "SELECT
//                stock_detail.pk_id as pkId,stock_batch.pk_id as stckbatch_id,stock_detail.stock_master_id as masId,
//    stock_batch.number,
//    item_pack_sizes.item_name,
//    sum(stock_detail.quantity) as qty
//    FROM
//    stock_detail
//    INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
//    INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
//    INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
//    WHERE
//    stock_detail.stock_master_id in ($qr) group by stock_batch.number";exit;
//     echo $str_qry = "SELECT
//stock_detail.pk_id AS pkId,
//stock_batch.pk_id AS stckbatch_id,
//stock_detail.stock_master_id AS masId,
//stock_batch.number,
//Sum(stock_detail.quantity) AS qty,
//item_pack_sizes.item_name
//FROM
//stock_detail
//INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
//INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
//INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
//INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
//WHERE
//	stock_detail.stock_master_id IN ($qr)
//GROUP BY
//	stock_batch.number";exit;

        $str_qry = "SELECT * FROM (SELECT
				stock_master.pk_id AS masterId,
				stock_batch.pk_id,
                                stock_detail.pk_id as pkId,
				stock_batch.number,
                                item_pack_sizes.item_name,
				SUM(ABS(stock_detail.quantity)) - 
				(
					COALESCE((SELECT
						SUM(gatepass_detail.quantity)
					FROM
						gatepass_detail
					WHERE
						gatepass_detail.stock_detail_id = stock_detail.pk_id
					), NULL, 0)
				) AS Qty
			FROM
				stock_master
			INNER JOIN stock_detail ON stock_master.pk_id = stock_detail.stock_master_id
			INNER JOIN stock_batch ON stock_batch.pk_id = stock_detail.stock_batch_id
                        INNER JOIN stakeholder_item_pack_sizes ON stock_batch.stakeholder_item_pack_size_id = stakeholder_item_pack_sizes.pk_id
                        INNER JOIN item_pack_sizes ON stakeholder_item_pack_sizes.item_pack_size_id = item_pack_sizes.pk_id
			WHERE
				stock_master.from_warehouse_id = $wh_id
			AND stock_master.transaction_type_id =" . Model_TransactionTypes:: TRANSACTION_ISSUE . "
			AND stock_master.pk_id IN ($qr)
			GROUP BY
				stock_batch.pk_id) A
			WHERE A.Qty > 0";


        $em = Zend_Registry::get('doctrine');
        $row = $em->getConnection()->prepare($str_qry);
        $row->execute();
        $return = $row->fetchAll();

        //$stbatch_pk = $return[0]['stckbatch_id'];
        //return $result;
//         $qr1 = ' ';
//        end($stbatch_pk);
//        $count = count($stbatch_pk);
//        foreach ($stbatch_pk as $key => $value):
//            $qr1 .= $value . '  ';
//            if ($value != end($stbatch_pk))
//                $qr1 .= ' , ';
//        endforeach;




        $str_qry1 = " SELECT
                    Sum(gatepass_detail.quantity) AS gp_qty,
                    gatepass_detail.stock_detail_id
                    FROM
                            gatepass_detail
                    WHERE
                            gatepass_detail.stock_detail_id = 12
                    GROUP BY
                    gatepass_detail.stock_detail_id";

        $em = Zend_Registry::get('doctrine');
        $row = $em->getConnection()->prepare($str_qry1);
        $row->execute();
        $res = $row->fetchAll();
        //$return[0]['gp_qty'] = $res[0]['gp_qty'];
        //$return['gp_qty'] = $res[0]['gp_qty'];
        //$return['stc_qty'] = $return[0]['qty'];
        // $return['remain_qty'] = $return['stc_qty'] - $return['gp_qty'];
        return $return;
    }

    public function quantityDataByStcMaster($stm_id) {

        $str_qry = "SELECT
                            stock_detail.pk_id as pkId,stock_batch.pk_id as stckbatch_id,
                stock_batch.number,
                item_pack_sizes.item_name,
                stock_detail.quantity as qty
                FROM
                stock_detail
                INNER JOIN stock_batch ON stock_detail.stock_batch_id = stock_batch.pk_id
                INNER JOIN item_pack_sizes ON stock_batch.item_pack_size_id = item_pack_sizes.pk_id
                INNER JOIN stock_master ON stock_detail.stock_master_id = stock_master.pk_id
                WHERE
                stock_detail.stock_master_id = $stm_id";
        $em = Zend_Registry::get('doctrine');
        $row = $em->getConnection()->prepare($str_qry);
        $row->execute();
        $return = $row->fetchAll();
        return $return;
    }

    public function quantityDataByStcBatch($stb_id, $stm_id) {
        $str_sql = $this->_em->createQueryBuilder()
                ->select('sd.pkId,sd.quantity')
                ->from("StockDetail", "sd")
                ->where("sd.stockBatch =" . $stb_id)
                ->andwhere("sd.stockMaster =" . $stm_id);
        //echo $str_sql->getQuery()->getSql();
        $result = $str_sql->getQuery()->getResult();
        if (!empty($result) && count($result) > 0) {
            return $result;
        } else {
            return false;
        }

//        echo  $str_qry = "SELECT
//                stock_detail.pk_id as pkId,
//    stock_detail.quantity as qty
//    FROM
//    stock_detail
//    WHERE
//    stock_detail.stock_batch_id = $stb_id and stock_detail.stock_master_id = $stm_id";exit;
//        $em = Zend_Registry::get('doctrine');
//        $row = $em->getConnection()->prepare($str_qry);
//        $row->execute();
//        $return = $row->fetchAll();
//        return $return;
    }

    public function getClosest($array, $search) {
        $closest = null;
        foreach ($array as $key => $val) {
            if ($closest == null || abs($search - $closest) > abs($val - $search)) {
                $closest = $val;
                $closestKey = $key;
                $arr = array($closestKey, $closest);
            }
        }
        return $arr;
    }

    public function updateDetail($id, $batch_id) {
        //echo $id;
        $stock_detail = $this->_table->find($id);
        $b_id = $this->_em->getRepository('StockBatch')->find($batch_id);
        $stock_detail->setStockBatch($b_id);
        $this->_em->persist($stock_detail);
        return $this->_em->flush();
    }

}
